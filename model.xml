<corto xmlns:corto="http://corto.io/packages/driver/fmt/xml">
    <corto:package name="corto" url="http://corto.io/doc/corto">
        <corto:package name="ic" url="http://corto.io/doc/corto/ic">

            <enum name="kind">
                <corto:scope>
                    <constant name="STORAGE"/>
                    <constant name="LITERAL"/>
                    <constant name="LABEL"/>
                    <constant name="ADDRESS"/>
                    <constant name="FUNCTION"/>
                    <constant name="OP"/>
                    <constant name="SCOPE"/>
                </corto:scope>
            </enum>

            <enum name="opKind">
                <corto:scope>
                    <constant name="set"/>
                    <constant name="cast"/>
                    <constant name="strcat"/>
                    <constant name="strcpy"/>
                    <constant name="new"/>
                    <constant name="define"/>
                    <constant name="free"/>
                    <constant name="keep"/>
                    <constant name="init"/>
                    <constant name="deinit"/>
                    <constant name="update"/>
                    <constant name="updatebegin"/>
                    <constant name="updateend"/>
                    <constant name="updatecancel"/>
                    <constant name="add"/>
                    <constant name="sub"/>
                    <constant name="mul"/>
                    <constant name="div"/>
                    <constant name="mod"/>
                    <constant name="inc"/>
                    <constant name="dec"/>
                    <constant name="xor"/>
                    <constant name="or"/>
                    <constant name="and"/>
                    <constant name="not"/>
                    <constant name="shift_left"/>
                    <constant name="shift_right"/>
                    <constant name="cond_or"/>
                    <constant name="cond_and"/>
                    <constant name="cond_not"/>
                    <constant name="cond_eq"/>
                    <constant name="cond_neq"/>
                    <constant name="cond_gt"/>
                    <constant name="cond_lt"/>
                    <constant name="cond_gteq"/>
                    <constant name="cond_lteq"/>
                    <constant name="jump"/>
                    <constant name="jeq"/>
                    <constant name="jneq"/>
                    <constant name="stop"/>
                    <constant name="push"/>
                    <constant name="call"/>
                    <constant name="ret"/>
                </corto:scope>
            </enum>

            <enum name="storageKind">
                <corto:scope>
                    <constant name="OBJECT"/>
                    <constant name="VARIABLE"/>
                    <constant name="ACCUMULATOR"/>
                    <constant name="MEMBER"/>
                    <constant name="ELEMENT"/>
                </corto:scope>
            </enum>

            <enum name="derefKind">
                <corto:scope>
                    <constant name="DEREF_VALUE"/>
                    <constant name="DEREF_ADDRESS"/>
                </corto:scope>
            </enum>

            <class name="node">
                <corto:scope>
                    <member name="kind" type="ic/kind" modifiers="readonly"/>
                    <overridable name="str(inout:string in)" return_type="string"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="address" base="node">
                <corto:scope>
                    <member name="value" type="word"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <corto:object name="scope" type="class"/>

            <class name="storage" base="node">
                <corto:scope>
                    <member name="name" type="string"/>
                    <member name="type" type="type"/>
                    <member name="isReference" type="bool"/>
                    <member name="holdsReturn" type="bool"/>
                    <member name="kind" type="storageKind" modifiers="readonly"/>
                    <member name="base" type="storage" modifiers="readonly"/>
                    <member name="used" type="uint32" modifiers="readonly"/>
                    <member name="scope" type="ic/scope" modifiers="readonly"/>
                    <method name="free()"/>
                    <method name="str(inout:string in)" return_type="string"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="object" base="storage" base_modifiers="readonly">
                <corto:scope>
                    <member name="ptr" type="object"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="variable" base="storage">
                <corto:scope>
                    <member name="isParameter" type="bool"/>
                    <member name="isReturn" type="bool"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="member" base="storage" base_modifiers="readonly">
                <corto:scope>
                    <member name="base" type="storage"/>
                    <member name="member" type="member"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="element" base="storage" base_modifiers="readonly">
                <corto:scope>
                    <member name="base" type="storage"/>
                    <member name="index" type="node"/>
                    <member name="variableIndex" type="bool" modifiers="readonly"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="accumulator" base="storage">
                <corto:scope>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="literal" base="node" base_modifiers="readonly">
                <corto:scope>
                    <member name="value" type="any"/>
                    <method name="str(inout:string in)" return_type="string"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="label" base="node" base_modifiers="readonly">
                <corto:scope>
                    <member name="id" type="uint32" modifiers="readonly"/>
                    <method name="str(inout:string in)" return_type="string"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="function" base="node" base_modifiers="readonly">
                <corto:scope>
                    <member name="function" type="function"/>
                    <method name="str(inout:string in)" return_type="string"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="op" base="node">
                <corto:scope>
                    <member name="line" type="uint32"/>
                    <member name="kind" type="opKind"/>
                    <member name="s1" type="node"/>
                    <member name="s2" type="node"/>
                    <member name="s3" type="node"/>
                    <member name="s1Deref" type="derefKind"/>
                    <member name="s2Deref" type="derefKind"/>
                    <member name="s3Deref" type="derefKind"/>
                    <member name="s1Any" type="bool"/>
                    <method name="isValid()" return_type="bool"/>
                    <method name="str(inout:string in)" return_type="string"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="scope" base="node">
                <corto:scope>
                    <member name="parent" type="scope"/>
                    <member name="isFunction" type="bool"/>
                    <member name="storages" type="list{storage}" modifiers="readonly|not_null"/>
                    <member name="program" type="list{node}" modifiers="readonly|not_null"/>
                    <method name="lookupStorage(string name,bool recursive)" return_type="storage"/>
                    <method name="add(node n)"/>
                    <method name="addStorage(storage s)"/>
                    <method name="str(inout:string in)" return_type="string"/>
                    <method name="construct()" return_type="int16"/>
                </corto:scope>
            </class>

            <class name="program">
                <corto:scope>
                    <member name="filename" type="string"/>
                    <member name="storages" type="list{storage}" modifiers="readonly|not_null"/>
                    <member name="scopes" type="list{scope}" modifiers="readonly|not_null"/>
                    <member name="labels" type="list{label}" modifiers="readonly|not_null"/>
                    <member name="literals" type="list{literal}" modifiers="readonly|not_null"/>
                    <member name="ops" type="list{op}" modifiers="readonly|not_null"/>
                    <member name="labelCount" type="uint32" modifiers="readonly"/>
                    <member name="accumulatorSp" type="uint32" modifiers="readonly"/>
                    <member name="accumulatorStack" type="array{accumulator, 256}" modifiers="readonly"/>
                    <member name="autoAccId" type="uint32" modifiers="readonly"/>
                    <member name="scope" type="ic/scope" modifiers="readonly"/>
                    <member name="errors" type="uint32" modifiers="readonly"/>
                    <member name="labelCount" type="uint32" modifiers="local|private"/>
                    <member name="vmprogram" type="word" modifiers="readonly"/>
                    <method name="construct()" return_type="int16"/>
                    <method name="add(node n)"/>
                    <method name="pushAccumulator(type type,bool isReference,bool holdsReturn)" return_type="accumulator"/>
                    <method name="popAccumulator()"/>
                    <method name="pushScope()" return_type="ic/scope"/>
                    <method name="pushFunction(function function)" return_type="ic/scope"/>
                    <method name="popScope()"/>
                    <method name="assemble()" return_type="int16"/>
                    <method name="run(word result,sequence{string} argv)" return_type="int16"/>
                    <method name="str()" return_type="string"/>
                    <method name="getLabel()" return_type="uint32"/>
                    <method name="getAccId()" return_type="uint32"/>
                    <method name="getObject(object o)" return_type="ic/object"/>
                    <method name="getVariable(string name)" return_type="ic/variable"/>
                    <method name="declareVariable(string name,type type,bool isReference,bool holdsReturn,bool isParameter,bool isReturn)" return_type="ic/variable"/>
                    <method name="getMember(storage base,member m)" return_type="ic/member"/>
                    <method name="getElement(storage base,node index)" return_type="ic/element"/>
                    <function name="get()" return_type="program"/>
                </corto:scope>
            </class>

            <function name="opKindFromOperator(operatorKind operator)" return_type="opKind"/>

        </corto:package>
    </corto:package>
</corto>
